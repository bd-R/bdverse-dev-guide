[
["index.html", "bdverse: Development Guide", " bdverse: Development Guide The bdverse team 2020-09-01 🚧Under Construction🚧 Figure 0.1: bdverse package architecture This work was supported by: [To add: Technion’s Blumenstein Fund] This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License. Published with bookdown "],
["bdverse.html", "1 bdverse 1.1 Pkg Info: 1.2 Arcitecture", " 1 bdverse 🚧 Under Construction 🚧 1.1 Pkg Info: Title: An Infrastructural Toolkit for Biodiversity Data Quality in R Description: A sustainable and agile infrastructure that enhances the value of biodiversity data by allowing users to conveniently employ R, for data exploration, quality assessment, data cleaning, and standardization. The bdverse supports users with and without programming capabilities. It includes six unique packages in a hierarchal structure — representing different functionality levels. 1.2 Arcitecture 1.2.1 R functions dependency &amp; information 1.2.2 Dependencies 1.2.3 Testing "],
["bddwc.html", "2 bddwc 2.1 Pkg Info: 2.2 Pkg Architecture", " 2 bddwc 🚧 Under Construction 🚧 2.1 Pkg Info: Title: Darwin Core (DwC) Field Name Standardizer in R Description: Supplies a set of functions to standardize field names according to Darwin Core (DwC) format. Darwinize your data easily. 2.2 Pkg Architecture 2.2.1 Overview Figure 2.1: bddwc overview 2.2.2 R functions dependency &amp; information ## Error in x[[2]] : subscript out of bounds ## Error in x[[2]] : subscript out of bounds ## Error in x[[2]] : subscript out of bounds ## Error in x[[2]] : subscript out of bounds ## Error in x[[2]] : subscript out of bounds ## Error in x[[2]] : subscript out of bounds ## Error in x[[2]] : subscript out of bounds ## Error in x[[2]] : subscript out of bounds ## Error in x[[2]] : subscript out of bounds ## Error in x[[2]] : subscript out of bounds ## Error in x[[2]] : subscript out of bounds ## Error in x[[2]] : subscript out of bounds ## Error in x[[2]] : subscript out of bounds ## Error in x[[2]] : subscript out of bounds ## Error in x[[2]] : subscript out of bounds ## Error in x[[2]] : subscript out of bounds ## Error in x[[2]] : subscript out of bounds ## Error in x[[2]] : subscript out of bounds ## Error in x[[2]] : subscript out of bounds ## Error in x[[2]] : subscript out of bounds ## Error in x[[2]] : subscript out of bounds ## Error in x[[2]] : subscript out of bounds ## Error in x[[2]] : subscript out of bounds ## Error in x[[2]] : subscript out of bounds 2.2.3 Dependencies 2.2.4 Testing "],
["bddwc-app.html", "3 bddwc.app", " 3 bddwc.app 🚧 Under Construction 🚧 "],
["bdchecks.html", "4 bdchecks", " 4 bdchecks 🚧 Under Construction 🚧 "],
["bdchecks-app.html", "5 bdchecks.app", " 5 bdchecks.app 🚧 Under Construction 🚧 "],
["bdclean-app.html", "6 bdclean", " 6 bdclean 🚧 Under Construction 🚧 "],
["pkgs-under-construction.html", "7 Pkgs Under Construction 7.1 bdvis 7.2 bddashboard 7.3 bdtools", " 7 Pkgs Under Construction 7.1 bdvis 7.2 bddashboard https://github.com/rahulchauhan049/dashboard.experiment 7.3 bdtools "],
["git-github-strategy.html", "8 Git &amp; GitHub Strategy 8.1 Our needs 8.2 Our Git strategy 8.3 Adjustments to working with GitHub 8.4 Versioning", " 8 Git &amp; GitHub Strategy 8.1 Our needs Synchronizing the perpetual development and releases of many R packages is challenging; nevertheless, when they have a strict hierarchical dependency architecture. Fully embracing Git best practices is crucial to our well being (i.e., crucial to project longevity). 8.2 Our Git strategy [Under Construction] Having a clear, robust, consistent, and well-documented branching strategy is the key. We are more or less following the Gitflow Workflow: From: https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow 8.2.1 master &amp; dev Develop and Master Branches 8.2.2 Feature branches: pros &amp; cons Feature Branches 8.2.3 Multi-packages release: bdverse is the key Release Branches 8.3 Adjustments to working with GitHub [Under Construction] The Github Flow is somewhat different… 8.3.1 master is the defult branch, why? 8.4 Versioning [Under Construction] https://semver.org/ Semantic Versioning "],
["testing.html", "9 Automated Tests 9.1 Unit testing 9.2 shinytest 9.3 Tests library", " 9 Automated Tests 🚧 Under Construction 🚧 9.1 Unit testing 9.1.1 Create a test You can use below code to write a test. Make sure you have testthat package installed and loaded. test_that(description_of_test, code_of_test) Example: context(&quot;Tests&quot;) # These tests should either return error as it&#39;s intended or be silent test_that(&quot;User Data&quot;, { expect_error(test_data_user()) expect_error(test_data_user(matrix())) expect_error(test_data_user(data.frame())) foo &lt;- data.frame(1) names(foo) &lt;- NULL expect_error(test_data_user(foo)) expect_warning(test_data_user(data.frame(a = 1, a = 2, check.names = FALSE))) expect_silent(mtcars) }) Now, we will look into what kind of tests are possible. Remember, below tests are like bricks, you can build anything with them. Idea should be to keep them simple and use as much as you like. ### Equality expectations See if an object is equal to value. expect_identical() expect_equal() expect_equivalent() expect_reference() 9.1.2 Expect Use it for writing custom expectations. expect(ok, failure_message, info = NULL, srcref = NULL, trace = NULL) 9.1.3 Expect error Check if code throws an error. expect_error() expect_condition() 9.1.4 Expect invisible These are pretty cool tests as we can test the function which might return no visible output. expect_invisible(call, label = NULL) expect_visible(call, label = NULL) 9.1.5 Expect length It can be helpful to check length of a vector. See if it is as per requirement of software design or function desgn. expect_length(object, n) # where n is length # expect_length(2:20, 18) 9.1.6 Expect match Check if a string matches to regular expression. expect_match( object_to_test, regular_expression) 9.1.7 Expect message This can come handy when you want to check if the code you have written produces warning or messages. expect_message(object) Example: dummy_function &lt;- function(a){ if (a == 0){ message(&quot;a is zero&quot;) return(a) } } expect_message(dummy_function(0), &quot;a is zero&quot;) expect_message(dummy_function(1), NA) expect_warning(object) Example: dummy_function &lt;- function(a){ if (a == 0){ warning(&quot;a is zero&quot;) return(a) } } expect_warning(dummy_function(0), &quot;a is zero&quot;) expect_warning(dummy_function(1), NA) 9.1.8 Expect named Check if object have name(s). You can also check what it s and if there is no name at all. # to check if object name is from character vector expect_named(object, expected_names) # to check if object name is absent expect_named(object, NULL) Example: a &lt;- c( x= 0, y= 1) expect_named(a) expect_named(a, c(&quot;x&quot;, &quot;y&quot;)) expect_named(a, NULL) #check absence of names 9.1.9 Expect null expect_null(object) Example: a &lt;- NULL expect_null(a) #below is another way to check for equal expect_equal(a, NULL) # also you can check type of &#39;a&#39; object expect_type(a, &quot;NULL&quot;) 9.1.10 Expect output How to check if your code print output to the console. expect_output( object, regular_expression) Example: expect_output(str(mtcars),&quot;11 variables&quot;) 9.1.11 expect setequal You canuse this test to check if two vectors contain the same values. We have two variants, setequal and mapequal. expect_setequal(vector_1, vector_2) list_ex &lt;- list(x =0, y =1) expect_mapequal(list_ex, list(x =0, y =1)) 9.1.12 Expect silent If you are sure that a code should not output any kind of output, messages or warnings, you can use this test. expect_silent(object) 9.1.13 Expect vector You can check if an object has vector properties. expect_vector(object) Example: if (requireNamespace(&quot;vctrs&quot;)) { expect_vector(1:10, ptype = integer(), size = 10) show_failure(expect_vector(1:10, ptype = integer(), size = 5)) show_failure(expect_vector(1:10, ptype = character(), size = 5)) } 9.1.14 Fail/ Success What if you want to manually trigger failure or success, you can do that easily. fail(message = &quot;Failure has been forced&quot;, info = NULL) succeed(message = &quot;Success has been forced&quot;, info = NULL) 9.1.15 Fail reporter This is a reporter. We will see few of them as we move forward. This throws an error if any test fails. This is usually combined with other reporters. 9.1.16 Check inheritance If you want a way to check if an object is inherited from S3 or S4 class,you can use these tests. expect_type(x,type) expect_s3_class(x,class) #for s3 expect_s4_class(x,class) #for s4 Example: show_success(expect_s4_class(a, &quot;data.frame&quot;)) expect_type(a$y, &quot;integer&quot;) 9.1.17 Logical expectations These are used when other tests are not according to your expectations(Haha, no pun intended.) These are not very informative. expect_true(object) expect_false(object) Example: a &lt;- 1:999 expect_true( length(a) == 999) expect_false( length(a) == 0) expect_equal(length(a), 999) 9.1.18 Skip a test Assume you are developing something and you think you need to skip some tests or getting false failures. You are 100% sure about it. In that case,you can use skip() to skip tests as per requirement. skip(message) If you want to include conditions, you can do that too. skip_if_not(condition, message = deparse(substitute(condition))) skip_if(condition, message = NULL) To check if a package is installed. This can come handy for designing troubleshooting mechanism where packages are dependent on each other. skip_if_not_installed(pkg, minimum_version = &quot;specify version&quot;) Skip if a host is offline. This is handy if a package depends on some website for a functionality and it is offline. Sometimes it’s not obvious where the failure occured, having tests on each step will save a lot of time. skip_if_offline(host = &quot;bdverse.org&quot;) And lastly, these are service specific. If you are using CRAN, you may want to skip particular tests. Some skip_on_cran() skip_on_bioc() To skip on a particular operating system.Supported: “windows”, “mac”, “linux” and “solaris”. skip_on_os(os) To skip on CI/CD and other services in your project workflow. skip_on_ci() skip_on_travis() skip_on_appveyor() skip_on_covr() For translation related. skip_if_translated(msgid = &quot;&#39;%s&#39; not found&quot;) #to check for translation 9.1.19 run all tests with custom location of tests We may come across a case where you want to run few tests froma directory. test_dir helps to do just that. test_dir(testthat_examples(), reporter = &quot;minimal&quot;) # you can change reporter Similarly, you have test_file to run tests from specific file. # store path in path variable test_file(path, reporter = &quot;summary&quot;) # you can change reporter What if you want to locate a particular file in a testing directory to do some troubleshooting work. You can use test_path for that. It helps you find any test file inside tests/testthat test_path(&quot;path to file&quot;) 9.1.20 C++ unit testing This will allow you to do C++ unit testing if needed. use_catch(dir = getwd()) #directory of package 9.1.21 Regression test We can do regresion test using verify_output() which s specifically designed for that. The output is intuitive. It can be used with git. # The first argument would usually be `test_path(&quot;informative-name.txt&quot;`) # but that is not permitted in examples path &lt;- tempfile() verify_output(path, { head(mtcars) log(-10)= &quot;a&quot; * 3 }) writeLines(readLines(path)) # Use strings to create comments in the output verify_output(tempfile(), { &quot;Print method&quot; head(mtcars) &quot;Warning&quot; log(-10) &quot;Error&quot; &quot;a&quot; * 3 }) # Use strings starting with # to create headings verify_output(tempfile(), { &quot;# Base functions&quot; head(mtcars) log(-10) &quot;a&quot; * 3 }) 9.1.22 Automatic testing Well what if you want to run tests after everychanges instead of running them manually. After all, once your testing infrastructure is up and running, you need not test the codebase manually everytime something changes. here auto_test and auto_test_package comes handy. When you are developing code. Run following. auto_test(code_path,test_path, reporter = &quot;summary&quot;) And when you are working with a package, you can run following: auto_test_package(pkg = &quot;package_pa&quot;, reporter = default_reporter(), hash = TRUE) These are pretty much every possible test with testthat. Stay tuned for more updates! 9.2 shinytest bdverse uses shiny for various packages to build beautiful User Interfaces for different packages. Testing shiny applications is very easy and intuitive, Imagine it like recording a screen and then replaying it to make sure everything works as intended. You do not have to write manual tests either. It is that easy. Let’s begin. Shiny tests are a way to test Shiny applications. You can install it using following commands. 9.2.1 Install shinytest library(devtools) install_github(&quot;rstudio/shinytest&quot;) 9.2.2 Record a test Shiny is a little didiffrent when it comes to testing. Here, we record them and then run the tests. To record tests, we run following command. library(shinytest) recordTest(&quot;/path_of_shinyapp&quot;) This puts the shiny app in testing/recording mode. You can then run the application and test it the way you think will be helpful to the bdverse. The tests will be recoreded and saved. 9.2.3 Run the recorded test You can now run the recorded test using following command. testApp(&quot;/path_of_shinyapp&quot;) Another way of doing it. Here the second argument will get tests from tests/ directory. # testApp(&quot;myshinyapp&quot;, &quot;mytest&quot;) Note: “mytest” is just name of test script. You can change t n test event recorder if you want to. If you want to compare the results without rerunning the tests, you can use following command. snapshotCompare(&quot;path_of_shinyapp&quot;, &quot;mytest&quot;) #&quot;mytest&quot; s You can visit here for in depth tests if the above ones are not sufficient for your need. 9.3 Tests library [Coming Soon!] "],
["ci.html", "10 Continuous Integration (CI) 10.1 What is CI? 10.2 bdverse CI strategy", " 10 Continuous Integration (CI) 10.1 What is CI? Work in progress. If you know that you want Travis CI to skip a build (e.g., you’ve just edited the ReadMe file), include [ci skip] or [skip ci] anywhere in the commit message. You can skip to build in Travis CI by putting keywords [skip ci] or [ci skip] in your commit messages. This can be used when doing minor changes such as fixing a typo in documentation,etc. 10.1.1 tic 10.1.1.1 Installation with R Studio. remotes::install_github(\"ropensci/tic\") then A GITHUB_PAT needs to be set to create the SSH key pair required for deployment on GitHub Actions. Please call usethis::browse_github_pat(), follow the instructions and then call use_tic() again. run usethis::browse_github_pat() This will open your github tokens page,may ask for your password. Generate the token with default settings provided and copy the token. Now run usethis::edit_r_environ(). This will open .Renviron file of your project and now write GITHUB_PAT=you_token_key_here. Make sure you add an empty new line below that line. Save the file. Restart R for changes to take place. 10.1.1.2 for new user of tic Run tic::use_tic() If you already use tic and want to configure a new CI provider do the following 10.1.1.3 For GitHub Actions tic::use_ghactions_deploy() # (optional for deployment) ## i Querying GitHub deploy keys from repo. ## √ Setting active project to &#39;C:/Users/tomer/Google Drive/repo-repo/bdverse-dev-guide@tom-gu&#39; ## &gt; Deploy keys for GitHub Actions already present. No action required. tic::use_ghactions_yml() # optional: Change `type` arg to your liking ## i Please comment in/out the platforms you want to use in ## .github/workflows/tic.yml. ## Call `usethis::edit_file(&#39;.github/workflows/tic.yml&#39;)` to ## open the YAML file. ## i Writing .github/workflows/tic.yml. ## v Below is the file structure of the new/changed files: ## bdverse-dev-guide@tom-gu ## \\-.github ## \\-workflows ## \\-tic.yml cat(tic::use_tic_r(&quot;package&quot;, deploy_on = &quot;ghactions&quot;)) ## ## -- tic.R -- ## ## √ Leaving &#39;tic.R&#39; unchanged ## FALSE # (all of the above in one call) tic::use_tic(wizard = FALSE, linux = &quot;ghactions&quot;, mac = &quot;ghactions&quot;, windows = &quot;ghactions&quot;, matrix = &quot;ghactions&quot;, deploy = &quot;ghactions&quot;) ## &gt; Welcome to tic! ## ## -- Introduction: ------------------------------------------- ## tic currently comes with support for four CI providers: ## * Appveyor ## * Circle CI ## * Travis CI ## * GitHub Actions ## There is no need to use all of them. You can choose which ## one(s) you want to use, whether you want to deploy (i.e. ## push from builds) and if you want to test on multiple R ## versions. ## ## We recommend the following setup: ## * Travis CI: Linux ## * Travis CI: macOS ## * Appveyor: Windows ## ## -- Setting up the CI providers ----------------------------- ## Next we are getting the selected CI providers ready for ## deployment. This requires some interaction with their API ## and you may need to create an API token. ## ## i Querying GitHub deploy keys from repo. ## &gt; Deploy keys for GitHub Actions already present. No action required. ## ## -- Creating YAML files... ---------------------------------- ## ## -- Travis CI -- ## ## &lt;U+221A&gt; OK ## ## -- Circle CI -- ## ## &lt;U+221A&gt; OK ## ## -- Appveyor CI -- ## ## &lt;U+221A&gt; OK ## ## -- GitHub Actions -- ## ## i Please comment in/out the platforms you want to use in ## .github/workflows/tic.yml. ## Call `usethis::edit_file(&#39;.github/workflows/tic.yml&#39;)` to ## open the YAML file. ## i Writing .github/workflows/tic.yml. ## v Below is the file structure of the new/changed files: ## bdverse-dev-guide@tom-gu ## \\-.github ## \\-workflows ## \\-tic.yml ## ## &lt;U+221A&gt; OK ## ## -- tic.R -- ## ## √ Leaving &#39;tic.R&#39; unchanged ## * Done! Thanks for using tic. ## i Consider also to take a look at `tic::use_update_tic()` to update ## your GHA YAML file via GHA. This way, your template always gets ## updated automatically with new template changes. tic::use_tic_badge(&quot;ghactions&quot;) ## Warning: Multiple github remotes found. Using origin. tic::use_update_tic() ## &gt; Added new file: ## bdverse-dev-guide@tom-gu ## \\-.github ## \\-workflows ## \\-update-tic.yml ## i Note that you need to add a secret with &#39;workflow&#39; scopes named ## `TIC_UPDATE` to your repo to make this automation work. You can use ## `tic::gha_add_secret(&lt;secret&gt;, &#39;TIC_UPDATE&#39;)` for this. You can use usethis::edit_file('.github/workflows/tic.yml') to edit the tic file and comment out platforms. ## Why we need it? 10.2 bdverse CI strategy "],
["github-actions.html", "11 GitHub Actions 11.1 File Sync System", " 11 GitHub Actions 🚧 Under Construction 🚧 11.1 File Sync System https://github.com/marketplace/actions/file-sync "],
["defen-prog.html", "12 Defensive Programing", " 12 Defensive Programing [Coming Soon!] "],
["in-house-packages.html", "13 In-house Packages 13.1 Development: bddev/bdtests 13.2 Monitoring: bdmonitor 13.3 Experimentation: bddummy", " 13 In-house Packages 🚧 Under Construction 🚧 13.1 Development: bddev/bdtests GitHub repo: https://github.com/bd-R/bdmonitor 13.2 Monitoring: bdmonitor GitHub repo: https://github.com/bd-R/bdmonitor 13.2.1 The bdmonitor dashboard Better to use the dashboard in full screen 13.3 Experimentation: bddummy https://github.com/sunn-e/bddummy "],
["pkg-submission.html", "14 Package submission 14.1 Peer-review: rOpenSci 14.2 CRAN 14.3 Papers", " 14 Package submission 🚧 Under Construction 🚧 14.1 Peer-review: rOpenSci 14.2 CRAN 14.3 Papers "],
["feedback.html", "15 Getting Feedback 15.1 Report a bug or give feedback from the app 15.2 Submit a GitHub issue 15.3 Contribute", " 15 Getting Feedback 🚧 Under Construction 🚧 15.1 Report a bug or give feedback from the app To link a new issue (bug tamplate) within each app + to create an issue tamplete for feedback 15.2 Submit a GitHub issue bddwc https://github.com/bd-R/bddwc/issues https://github.com/bd-R/bddwc.app/issues bdchecks https://github.com/bd-R/bdchecks/issues https://github.com/bd-R/bdchecks.app/issues bdclean https://github.com/bd-R/bdclean/issues 15.3 Contribute https://github.com/bd-R Please read our developing guide: https://bd-r.github.io/bdverse-dev-guide/. Looking forward to your pull request :-) "],
["doc-system.html", "16 Centralized Documentation Scheme 16.1 The main idea 16.2 The implementation 16.3 Centralized reposotoiers", " 16 Centralized Documentation Scheme 🚧 Under Construction 🚧 16.1 The main idea 16.2 The implementation 16.2.1 Source Rmd files Pkg Info specifically build for a package, here is a generic example: Download pkg_info.Rmd --- title: &quot;Pkg Info (source documentation file)&quot; output: html_document --- # Pkg info setup ```{r, eval = T, include = TRUE, results=&#39;asis&#39;} PKG = &#39;bdDwC&#39; # Package name WAI = c(&#39;readme&#39;, &#39;website&#39;, &#39;user_guide&#39;, &#39;dev_guide&#39;) # Setup &#39;Where Am I?&#39; (for conditioning sections of a code chunk) H = 1 # Setup top header level within a code chunk ``` # Pkg info chunk 1 Conditional sections: **readme** | **website** ```{r, label=&#39;try-test1&#39;, echo=FALSE, eval=TRUE, results=&#39;asis&#39;} cat(strrep(&#39;#&#39;, H)) #&gt; H1 cat(&#39; Top level header: Something something...\\n\\n&#39;) cat(strrep(&#39;#&#39;, H+1)) cat(&#39; Secondery header: Looking good!\\n\\n&#39;) cat(strrep(&#39;#&#39;, H+2)) cat(&#39; Third-level header: Nice...\\n\\n&#39;) if(&#39;readme&#39; %in% WAI){ cat(&#39; *Only README can read me*... \\n\\n bla bla bla `fun()` bla bla bla &#39;) } #&gt; Show Code in block: cat(&#39;\\n\\n```r\\n&#39;) cat(&#39;utils::packageDescription(&quot;&#39;,PKG,&#39;&quot;)$Title \\n&#39;, sep = &quot;&quot;) cat(&#39;utils::packageDescription(&#39;,PKG,&#39;)$Description \\n&#39;, sep = &#39;&quot;&#39;) cat(&#39;```\\n\\n&#39;) #&gt; Conditional section: if(&#39;website&#39; %in% WAI){ cat(&#39; Some more text for the website and...\\n &#39;) cat(&#39;\\n![](https://media.giphy.com/media/2HONNTJbRhzKE/giphy.gif)\\n\\n&#39;) } cat(strrep(&#39;#&#39;, H+2)) cat(&#39; Package title \\n\\n&#39;) #&gt; Show Code output: cat(&#39;\\n\\n&#39;, utils::packageDescription(PKG)$Title) ``` # Pkg info chunk 2 ```{r, label=&#39;try-test2&#39;, echo=FALSE, eval=TRUE, results=&#39;asis&#39;} cat(strrep(&#39;#&#39;, H+2)) cat(&#39; Package description \\n\\n&#39;) cat(utils::packageDescription(PKG)$Description) cat(&#39;\\n\\n&#39;) cat(strrep(&#39;#&#39;, H)) cat(&#39; Rmd file labels: \\n\\n&#39;) cat(knitr::all_labels()) ``` Rmd templates 16.2.2 Client Rmd files: Pkg README.Rmd Pkg Rmd file in the user guide Pkg Rmd file in the dev guide Pkg Rmd file in the website A README example: --- output: github_document --- &lt;!-- README.md is generated from README.Rmd. Please edit that file --&gt; ```{r setup, include = FALSE} knitr::opts_chunk$set( collapse = TRUE, comment = &quot;#&gt;&quot;, fig.path = &quot;man/figures/README-&quot;, out.width = &quot;100%&quot; ) ``` # Pkg Name &lt;!-- Reading pkg_info.Rmd + setup WAI --&gt; ```{r setup-pkg-info, eval = T, echo=F, include = FALSE} knitr::knit_child(&#39;pkg_info.Rmd&#39;) PKG = &#39;bdchecks&#39; # Package name WAI = &#39;readme&#39; # Setup &#39;Where Am I?&#39; (for conditioning part of a code chunk) # &#39;readme&#39;, &#39;website&#39;, &#39;user_guide&#39;, &#39;dev_guide&#39; ``` ## Chunk 1 ```{r eval = T, include = FALSE} H = 3 # Setup top header level within the following code chunk ``` ```{r ref.label=&#39;try-test1&#39;, echo = F, eval = T, results=&#39;asis&#39;} ``` ## Chunk 2 ```{r eval = T, include = FALSE} H = 4 # Setup top header level within the following code chunk ``` ```{r ref.label=&#39;try-test2&#39;, echo = F, eval = T, results=&#39;asis&#39;} ``` 16.3 Centralized reposotoiers 16.3.1 bdtemplates 16.3.1.1 CI templates 16.3.1.2 .gitignore &amp; .Rbuildignore 16.3.1.3 Rmd templates Pkg info Pkg badges Pkg CI table 16.3.2 Graphics For more details see bdgraphics (under the Graphics section). "],
["user-guide.html", "17 User Guide", " 17 User Guide "],
["website.html", "18 Website", " 18 Website "],
["readme.html", "19 Pkg README file", " 19 Pkg README file "],
["dev-guide.html", "20 Dev Guide", " 20 Dev Guide "],
["papers.html", "21 Papers", " 21 Papers "],
["graphics.html", "22 Graphics 22.1 Package color 22.2 bdgraphics", " 22 Graphics 🚧 Under Construction 🚧 22.1 Package color Figure 0.1: bdverse package 22.1.1 Retrieving pkg color # Data is stored in `bdutilities::bdverse_core_pkgs$pkg_color` knitr::kable(bdutilities::bdverse_core_pkgs) pkg_name pkg_color bdverse #265b6d bdDwC #785549 bddwc.app #785549 bdchecks #4BAE4D bdchecks.app #4BAE4D bdclean #37a5dd bdutilities #939598 bdutilities.app #939598 22.2 bdgraphics "],
["gsoc-about.html", "23 GSoC: what-why-how", " 23 GSoC: what-why-how "],
["gsoc-project.html", "24 Our GSoC projects", " 24 Our GSoC projects "],
["gsoc-future.html", "25 Future projects", " 25 Future projects "],
["booknews.html", "A NEWS A.1 0.0.1", " A NEWS A.1 0.0.1 YYYY-MM-DD, add details… YYYY-MM-DD, add details… "],
["references.html", "B References", " B References "]
]
